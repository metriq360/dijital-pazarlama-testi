// /netlify/functions/send-email.js

import sgMail from '@sendgrid/mail';
import OpenAI from 'openai';

// API AnahtarlarÄ±nÄ± Netlify ortam deÄŸiÅŸkenlerinden gÃ¼venli bir ÅŸekilde al
sgMail.setApiKey(process.env.SENDGRID_API_KEY);
const openai = new OpenAI({
    apiKey: process.env.VITE_OPENAI_API_KEY,
});

const getSectionTitle = (sectionNum, allQuestions) => {
    const titles = { 1: 'Sosyal Medya YÃ¶netimi', 2: 'Yerel SEO ve Google Benim Ä°ÅŸletmem', 3: 'Reklam ve Kampanya YÃ¶netimi', 4: 'Ä°Ã§erik PazarlamasÄ±', 5: 'Pazarlama AraÃ§larÄ± ve Otomasyon' };
    return titles[sectionNum] || `BÃ¶lÃ¼m ${sectionNum}`;
};

export const handler = async (event) => {
    console.log("Netlify fonksiyonu tetiklendi.");
    if (event.httpMethod !== 'POST') {
        return { statusCode: 405, body: JSON.stringify({ error: 'Method Not Allowed' }) };
    }

    try {
        const { scores, quizAnswers, userInfo, allQuestions } = JSON.parse(event.body);
        console.log(`Ä°stek alÄ±ndÄ±: ${userInfo.email} iÃ§in rapor oluÅŸturuluyor.`);
        const { totalScore, totalMaxScore, sectionScores, sectionMaxScores } = scores;

        // --- OpenAI Ä°steklerini Paralel Olarak HazÄ±rlama ---

        // 1. KÄ±sa Tavsiye Prompt'u
        const percentage = (totalScore / totalMaxScore) * 100;
        let performanceLevel = "orta";
        if (percentage < 40) performanceLevel = "geliÅŸtirilmesi gereken";
        else if (percentage >= 75) performanceLevel = "gÃ¼Ã§lÃ¼";

        const advicePrompt = `Bir kullanÄ±cÄ±, dijital pazarlama testinden 100 Ã¼zerinden ${Math.round(percentage)} puan aldÄ±. Bu, '${performanceLevel}' bir skordur. Bu kullanÄ±cÄ±ya, skorunu dikkate alarak, tek cÃ¼mlelik, motive edici ve aksiyona yÃ¶nelik bir tavsiye ver. Tavsiyende, METRIQ360'Ä±n sunduÄŸu bir hizmete veya IQ360 yaklaÅŸÄ±mÄ±na atÄ±fta bulunarak onlarla iletiÅŸime geÃ§meye teÅŸvik et. Her seferinde farklÄ± ve yaratÄ±cÄ± bir tavsiye oluÅŸtur.`;
        
        const advicePromise = openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [{ role: "user", content: advicePrompt }],
            max_tokens: 150,
            temperature: 0.8,
        });
        console.log("KÄ±sa tavsiye isteÄŸi oluÅŸturuldu.");

        // 2. DetaylÄ± Rapor Prompt'u
        const strongSections = [], weakSections = [];
        Object.keys(sectionScores).forEach(sectionNum => {
            const sectionPercentage = (sectionScores[sectionNum] / sectionMaxScores[sectionNum]) * 100;
            const title = getSectionTitle(parseInt(sectionNum), allQuestions);
            if (sectionPercentage >= 70) strongSections.push(title);
            else if (sectionPercentage <= 40) weakSections.push(title);
        });

        const testResultsDetails = Object.keys(sectionScores).map(sectionNum => {
            const sectionTitle = getSectionTitle(parseInt(sectionNum), allQuestions);
            const questionsForSection = allQuestions.filter(q => q.section === parseInt(sectionNum));
            const questionDetails = questionsForSection.map(q => `- Soru: ${q.text} | Verilen Puan: ${quizAnswers[q.id] || 0}/5`).join('\n');
            return `**${sectionTitle}**\n${questionDetails}`;
        }).join('\n\n');

        const reportPrompt = `Sen bir dijital pazarlama uzmanÄ±sÄ±n, METRIQ360 iÃ§in sektÃ¶r bazlÄ±, veri odaklÄ± ve sonuÃ§ getiren raporlar hazÄ±rlÄ±yorsun...\n\nKullanÄ±cÄ±:\nAd: ${userInfo.name} ${userInfo.surname}\nSektÃ¶r: ${userInfo.sector}\nGenel Puan: ${totalScore} / ${totalMaxScore}\nGÃ¼Ã§lÃ¼ YÃ¶nler: ${strongSections.join(', ') || 'Belirgin bir gÃ¼Ã§lÃ¼ yÃ¶n tespit edilemedi.'}\nZayÄ±f YÃ¶nler: ${weakSections.join(', ') || 'Belirgin bir zayÄ±f yÃ¶n tespit edilemedi.'}\n\nTest SonuÃ§larÄ± DetaylarÄ±:\n${testResultsDetails}\n\n---`;
        
        const reportPromise = openai.chat.completions.create({
            model: "gpt-4o",
            messages: [{ role: "user", content: reportPrompt }],
            max_tokens: 1500,
        });
        console.log("DetaylÄ± rapor isteÄŸi oluÅŸturuldu.");
        
        // Her iki isteÄŸin de tamamlanmasÄ±nÄ± aynÄ± anda bekle
        console.log("OpenAI'dan yanÄ±tlar bekleniyor...");
        const [adviceResult, reportResult] = await Promise.all([advicePromise, reportPromise]);
        console.log("OpenAI'dan yanÄ±tlar alÄ±ndÄ±.");

        const shortAdvice = adviceResult.choices[0].message.content.trim();
        const detailedReport = reportResult.choices[0].message.content;

        // 3. SendGrid ile E-postalarÄ± GÃ¶nderme
        console.log("E-postalar hazÄ±rlanÄ±yor...");
        const reportHtml = detailedReport.replace(/\n/g, '<br>');
        const msgToUser = {
            to: userInfo.email,
            from: 'iletisim@metriq360.com', 
            subject: `ğŸš€ Dijital Pazarlama SaÄŸlÄ±k Testi Raporunuz, ${userInfo.name}!`,
            html: `<h2>Merhaba ${userInfo.name},</h2><p>Testi tamamladÄ±ÄŸÄ±nÄ±z iÃ§in teÅŸekkÃ¼rler! AÅŸaÄŸÄ±da sizin iÃ§in Ã¶zel olarak hazÄ±rlanan raporu bulabilirsiniz:</p><hr>${reportHtml}`,
        };
        const msgToAdmin = {
            to: 'bilgi@metriq360.com',
            from: 'iletisim@metriq360.com',
            subject: `Yeni Test TamamlandÄ±: ${userInfo.name} ${userInfo.surname}`,
            html: `<h2>Yeni test sonucu:</h2><p><strong>KullanÄ±cÄ±:</strong> ${userInfo.name} ${userInfo.surname}</p><p><strong>E-posta:</strong> ${userInfo.email}</p><p><strong>SektÃ¶r:</strong> ${userInfo.sector}</p><p><strong>Puan:</strong> ${totalScore} / ${totalMaxScore}</p><hr><h3>OluÅŸturulan Rapor:</h3>${reportHtml}`,
        };
        
        console.log("E-postalar SendGrid'e gÃ¶nderiliyor...");
        await Promise.all([sgMail.send(msgToUser), sgMail.send(msgToAdmin)]);
        console.log("E-postalar baÅŸarÄ±yla gÃ¶nderildi.");

        // 4. BaÅŸarÄ±lÄ± yanÄ±tÄ± Ã¶n yÃ¼ze gÃ¶nder
        return {
            statusCode: 200,
            body: JSON.stringify({ shortAdvice, detailedReport }),
        };

    } catch (error) {
        console.error("Netlify Fonksiyonu HatasÄ±:", error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: error.message || 'Sunucuda bilinmeyen bir hata oluÅŸtu.' }),
        };
    }
};
